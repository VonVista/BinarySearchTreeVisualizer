{"version":3,"sources":["useResizeObserver.js","TreeChart.js","App.js","reportWebVitals.js","index.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","TreeChart","data","pathData","traversalData","reloadData","svgRef","useRef","wrapperRef","flat","previouslyRenderedData","value","usePrevious","root","svg","select","getBoundingClientRect","width","height","hierarchy","treeLayout","tree","size","linkGenerator","linkHorizontal","x","link","y","console","warn","descendants","links","selectAll","join","enter","append","attr","node","d","includes","transition","duration","delay","depth","enteringAndUpdatingLinks","length","this","getTotalLength","target","state","source","text","style","des","findIndex","traverse","log","marginBottom","App","reloadTree","setReloadTree","paths","setPath","traversalPath","setTraversal","curPath","curTraversal","prevNode","Node","children","BinarySearchTree","findMinNode","removeNode","key","aux","searchNode","push","inOrderHelper","pop","preOrderHelper","postOrderHelper","constructor","setConstructor","setData","React","updateState","useCallback","numToInsert","setnumInsert","numToDelete","setnumDelete","numToSearch","setnumSearch","Fragment","className","onSubmit","e","preventDefault","insert","parseInt","type","required","onChange","remove","search","onClick","inOrder","preOrder","postOrder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.592aca0c.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import React, { useRef, useEffect } from \"react\";\nimport { select, hierarchy, tree, linkHorizontal } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nfunction TreeChart({ data, pathData, traversalData, reloadData }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  pathData = pathData.flat();\n\n  // we save data to see if it changed\n  const previouslyRenderedData = usePrevious(data);\n\n  data = data.root;\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    // use dimensions from useResizeObserver,\n    // but use getBoundingClientRect on initial render\n    // (dimensions are null for the first render)\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // transform hierarchical data\n    const root = hierarchy(data);\n    const treeLayout = tree().size([width, height * 3]);\n\n    const linkGenerator = linkHorizontal()\n      .x(link => link.x)\n      .y(link => link.y);\n\n    const linkGenerator2 = (source, target) => {\n      return \"M \" + source.x + \" \" + source.y +\n      \" L \" + target.x + \" \" + target.y;\n    }\n\n    // enrich hierarchical data with coordinates\n    treeLayout(root);\n\n    console.warn(\"descendants\", root.descendants());\n    console.warn(\"links\", root.links());\n    console.warn(\"path data\", pathData.flat());\n    console.warn(\"traversal data\", traversalData);\n    console.warn(\"tree reload\", reloadData);\n\n    // nodes\n    svg\n      .selectAll(\".node\")\n      .data(root.descendants())\n      .join(enter => enter.append(\"circle\").attr(\"opacity\", 0))\n      .attr(\"class\", \"node\")\n      .attr(\"cx\", node => node.x)\n      .attr(\"cy\", node => node.y)\n      .attr(\"r\", function(d) {\n        if (d.data.value === \"e\") {\n          return 3;\n        }\n        // if(pathData.includes(d.data.value)){\n        //   return 15;\n        // }\n        return 6;\n      })   \n      .attr(\"fill\", function(d) { //TO SHOW PATH \n        if(pathData.includes(d.data.value)){\n          return \"#21c712\";\n        }\n        return \"#80c4ff\";\n      }) \n      .attr(\"stroke-width\", 0)\n      .transition()\n      .duration(500)\n      .delay(node => node.depth * 300)\n      .attr(\"opacity\", 1);\n\n    // links\n    const enteringAndUpdatingLinks = svg\n      .selectAll(\".link\")\n      .data(root.links())\n      .join(\"path\")\n      .attr(\"class\", \"link\")\n      .attr(\"d\", linkGenerator)\n      .attr(\"stroke-dasharray\", function() {\n        const length = this.getTotalLength();\n        return `${length} ${length}`;\n      })\n      .attr(\"stroke\", function(d) { //TO SHOW PATH \n        if(pathData.includes(d.target.data.value)){\n          return \"#21c712\";\n        }\n        return \"#80c4ff\";\n      }) \n      .attr(\"stroke-width\", function(d) {\n        if (d.target.data.value === \"e\") {\n          return 1;\n        }\n        if (d.target.data.state === \"path\") {\n          return 10;\n        }\n        return 4;\n      })\n      .attr(\"fill\", \"none\")\n      .attr(\"opacity\", 1);\n\n    if (reloadData === true) {\n      enteringAndUpdatingLinks\n        .attr(\"stroke-dashoffset\", function() {\n          return this.getTotalLength();\n        })\n        .transition()\n        .duration(500)\n        .delay(link => link.source.depth * 500)\n        .attr(\"stroke-dashoffset\", 0);\n    }\n\n    // labels\n    svg\n      .selectAll(\".label\")\n      .data(root.descendants())\n      .join(enter => enter.append(\"text\").attr(\"opacity\", 0))\n      .attr(\"class\", \"label\")\n      .attr(\"x\", node => node.x)\n      .attr(\"y\", node => node.y - 12)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", 24)\n      .attr(\"fill\", \"white\")\n      .text(function(d) {\n        if (d.data.value === \"e\") {\n          return \"\";\n        }\n        return d.data.value;\n      })\n      .transition()\n      .duration(500)\n      .delay(node => node.depth * 300)\n      .attr(\"opacity\", 1);\n\n    //arrow test\n    svg.append(\"svg:defs\").append(\"svg:marker\")\n      .attr(\"id\", \"arrow\")\n      .attr(\"refX\", 6)\n      .attr(\"refY\", 6)\n      .attr(\"markerWidth\", 12)\n      .attr(\"markerHeight\", 12)\n      .attr(\"orient\", \"auto\")\n      .attr(\"viewBox\", \"0 0 12 12\")\n      .append(\"path\")\n      .attr(\"d\", \"M2,2 L10,6 L2,10 L6,6 L2,2\")\n      .style(\"fill\", \"#fff000\");\n\n    svg\n      .selectAll(\".traversal\")\n      .data(traversalData)\n      .join(enter => enter.append(\"line\"))\n      .attr(\"class\", \"traversal\")\n      .attr(\"x1\", function(d) { var des = root.descendants(); return des[des.findIndex(node => node.data.value == d.value)].x })\n      .attr(\"y1\", function(d) { var des = root.descendants(); return des[des.findIndex(node => node.data.value == d.value)].y })\n      .attr(\"x2\", function(d) { var des = root.descendants(); return des[des.findIndex(node => node.data.value == d.traverse.value)].x })\n      .attr(\"y2\", function(d) { var des = root.descendants(); return des[des.findIndex(node => node.data.value == d.traverse.value)].y })\n      .attr(\"stroke\", function(d) {\n        var des = root.descendants();\n        console.log(\"STROKE LOGS\");\n        console.log(d);\n        console.log(des[des.findIndex(node => node.data.value == d.value)]);\n        console.log(des[des.findIndex(node => node.data.value == d.traverse.value)]);\n        return \"red\"\n      })\n      .attr(\"stroke\",\"#fff000\")  \n      .attr(\"stroke-width\",2)  \n      .attr(\"marker-end\",\"url(#arrow)\"); \n      \n  }, [data, pathData, traversalData, dimensions, reloadData, previouslyRenderedData]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default TreeChart;\n","import React, { useState, useRef } from \"react\";\nimport TreeChart from \"./TreeChart\";\nimport \"./App.css\";\n\nconst initialData = {\n  value: \"😐\",\n  children: [\n    {\n      value: \"🙂\",\n      children: [\n        {\n          value: \"😀\"\n        },\n        {\n          value: \"😁\"\n        },\n        {\n          value: \"🤣\"\n        }\n      ]\n    },\n    {\n      value: \"😔\"\n    }\n  ]\n};\n\nfunction App() {\n\n  const handleClick = () => {\n    initialData.children.push({value: \"😔\"});\n    setData(initialData);\n  }\n\n  const [reloadTree, setReloadTree] = useState(false);\n\n  const [numbers, setNumbers] = useState([50,17,12,23,19,9,14,72,54,67,76]);\n\n  const [paths, setPath] = useState([]);\n\n  const [traversalPath, setTraversal] = useState([]);\n\n  var curPath = [];\n\n  var curTraversal = [];\n\n  var prevNode = null;\n  \n  class Node {\n    constructor(value) {\n      this.value = value;\n      this.children = []; // [null,null];\n      // left child: children[0], right child: children[1] \n      this.traverse = \"e\";  //TEST\n    }\n  }\n\n  class BinarySearchTree {\n    constructor(value) {\n      this.root = new Node(value);\n    }\n\n    /* insert */\n    insert(value) {\n      setReloadTree(true);\n      console.log(this);\n      // create node from value\n      var node = new Node(value);\n      // if the tree's root is null, set the root to the new node\n      if (this.root == null || this.root.value == null || this.root.value === \"e\") {\n          //console.log(\"Root is null\");\n          this.root = node;\n      }\n\n      var current = this.root;\n      while (current) {\n        // If tree contains value return\n        if (current.value == value) {\n\n          return;\n        }\n        // value is less than current.value\n        else if (value < current.value) {\n            \n          if (current.children[0] == null || current.children[0].value == \"e\") {\n            current.children[0] = node;\n            if (current.children[1]==null){\n              current.children[1] = new Node(\"e\");\n            }\n\n            return;\n          }\n          // current = current.left;\n          current = current.children[0];\n        }\n        // value is greater than current.value\n        else {\n          if (current.children[1] == null || current.children[1].value == \"e\") {\n            // if (current.children[1] == null ){\n            if (!current.children[0]) {\n              current.children[0] = new Node(\"e\");\n            }\n            current.children[1] = node;\n\n            return;\n            }\n          current = current.children[1];\n        }\n      }\n    }\n\n    findMinNode(node) \n    { \n      // if left of a node is null \n      // then it must be minimum node \n      if(node.children[0] === \"null\" || node.children.length === 0 || node.children[0].value === \"e\"){\n        console.log(\"ITO YUNG MIN NODE\");\n        console.log(node);\n        return node; \n      }\n      else\n        return this.findMinNode(node.children[0]); \n    } \n\n    remove(data) \n    { \n      this.root = this.removeNode(this.root, data); \n      console.log(this);\n    } \n  \n    // Method to remove node with a  \n    // given data \n    // it recur over the tree to find the \n    // data and removes it \n    removeNode(node, key) \n    { \n      // if the root is null then tree is  \n      // empty \n\n      // if(typeof(node) == \"undefined\") {\n      //     return; \n      // }\n    \n      // if data to be delete is less than  \n      // roots data then move to left subtree \n      if(key < node.value) \n      { \n        if(typeof(node.children[0]) == \"undefined\") {\n          return node;\n        }\n\n        node.children[0] = this.removeNode(node.children[0], key); \n        return node; \n      } \n    \n      // if data to be delete is greater than  \n      // roots data then move to right subtree \n      else if(key > node.value) \n      { \n        if(typeof(node.children[1]) == \"undefined\") {\n          return node;\n        }\n\n        node.children[1] = this.removeNode(node.children[1], key); \n        return node; \n      } \n    \n      else\n      { \n        console.log(node);\n\n        if((node.children.length === 0) || (node.children[0].value === \"e\" && node.children[1].value === \"e\")) \n        { \n\n          console.log(\"BOTH NULL\");\n          node.value = \"e\"; \n          node.children.length = 0;\n          return node; \n        } \n  \n        // deleting node with one children \n        if(node.children[0] === null || node.children[0].value === \"e\") \n        { \n          console.log(\"LEFT CHILD YUNG NULL\");\n            node = node.children[1]; \n            return node; \n        } \n          \n        else if(node.children[1] === null || node.children[1].value === \"e\") \n        { \n          console.log(\"RIGHT CHILD YUNG NULL\");\n          node = node.children[0]; \n          return node; \n        } \n  \n        // Deleting node with two children \n        // minumum node of the rigt subtree \n        // is stored in aux \n        var aux = this.findMinNode(node.children[1]); \n        node.value = aux.value; \n  \n        node.children[1] = this.removeNode(node.children[1], aux.value); \n        return node; \n      } \n    }\n\n    search(data) \n    { \n      curPath = [];\n      setPath([]);\n      this.searchNode(this.root, data); \n      console.log(this);\n    } \n  \n    // Method to remove node with a  \n    // given data \n    // it recur over the tree to find the \n    // data and removes it \n\n\n    searchNode(node, key) \n    { \n      console.log(node.value);    \n      // if the root is null then tree is  \n      // empty \n      // if(node === \"null\") \n      //     return null; \n    \n      // if data to be delete is less than  \n      // roots data then move to left subtree \n      if(key < node.value) \n      { \n        curPath.push(node.value);\n        setPath([curPath]);\n\n        if(typeof(node.children[0]) == \"undefined\") {\n          setPath([]);\n          return;\n        }\n\n        this.searchNode(node.children[0], key); \n        return; \n      } \n    \n      else if(key > node.value) \n      { \n        curPath.push(node.value);\n        setPath([curPath]);\n\n        if(typeof(node.children[1]) == \"undefined\") {\n          setPath([]);\n          return;\n        }\n\n        this.searchNode(node.children[1], key); \n        return; \n      } \n\n      else\n      { \n        curPath.push(node.value);\n        console.log(curPath);\n        setPath([curPath]);\n      }\n    } \n\n    inOrder() {\n      setTraversal([]);\n      curTraversal = [];\n\n      this.inOrderHelper(this.root);\n      console.log(curTraversal);\n      curTraversal.pop();\n      \n      setTraversal(curTraversal);\n    }\n\n    inOrderHelper(root) {\n      if (typeof(root) != \"undefined\") {\n        if (root.value != \"e\"){\n          this.inOrderHelper(root.children[0]);\n\n          console.log(root.value);\n          curTraversal.push(root);\n          setTraversal([curTraversal]);\n\n          if(prevNode == null){\n            prevNode = root;\n          }\n          else {\n            prevNode.traverse = root;\n            prevNode = root;\n          }\n\n          this.inOrderHelper(root.children[1]);\n        }\n      }\n    }\n\n    preOrder() {\n      setTraversal([]);\n      curTraversal = [];\n\n      this.preOrderHelper(this.root);\n      console.log(curTraversal);\n      curTraversal.pop();\n      \n      setTraversal(curTraversal);\n    }\n\n    preOrderHelper(root) {\n      if (typeof(root) != \"undefined\") {\n        if (root.value != \"e\"){\n\n          console.log(root.value);\n          curTraversal.push(root);\n          setTraversal([curTraversal]);\n\n          if(prevNode == null){\n            prevNode = root;\n          }\n          else {\n            prevNode.traverse = root;\n            prevNode = root;\n          }\n\n          this.preOrderHelper(root.children[0]);\n\n          this.preOrderHelper(root.children[1]);\n        }\n      }\n    }\n\n    postOrder() {\n      setTraversal([]);\n      curTraversal = [];\n\n      this.postOrderHelper(this.root);\n      console.log(curTraversal);\n      curTraversal.pop();\n      \n      setTraversal(curTraversal);\n    }\n\n    postOrderHelper(root) {\n      if (typeof(root) != \"undefined\") {\n        if (root.value != \"e\"){\n\n          this.postOrderHelper(root.children[0]);\n\n          this.postOrderHelper(root.children[1]);\n\n          console.log(root.value);\n          curTraversal.push(root);\n          setTraversal([curTraversal]);\n\n          if(prevNode == null){\n            prevNode = root;\n          }\n          else {\n            prevNode.traverse = root;\n            prevNode = root;\n          }\n\n        }\n      }\n    }\n  } \n\n  const [constructor, setConstructor] = useState(false);\n\n  if(constructor === false){\n    console.log(constructor);\n    setConstructor(true);\n    var tree = new BinarySearchTree(null);\n  }\n\n  //const tree = new BinarySearchTree(null);\n\n\n  const [data, setData] = useState(new BinarySearchTree(null));\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n \n\n  \n\n  const doOperation = () => {\n    // for (var i = 0; i < numbers.length; i++) {\n    //   tree.insert(numbers[i]);\n    // }\n\n    //console.log(paths);\n  }\n\n  const [numToInsert, setnumInsert] = useState(\"\");\n\n  const [numToDelete, setnumDelete] = useState(\"\");\n\n  const [numToSearch, setnumSearch] = useState(\"\");\n\n  const handleSubmitInsertion = (e) => {\n    setTraversal([]);\n    setPath([]);\n    e.preventDefault();\n\n    var tree = data;\n    console.log(tree);\n    tree.insert(parseInt(numToInsert));\n    setData(tree);\n  }\n\n  const handleSubmitDeletion = (e) => {\n    setTraversal([]);\n    setPath([]);\n    e.preventDefault();\n\n    setReloadTree(true);\n\n    var tree = data;\n    tree.remove(parseInt(numToDelete));\n    setData(tree);\n  }\n\n  const handleSubmitSearch = (e) => {\n    e.preventDefault();\n    setPath([]);\n    setTraversal([]);\n\n    setReloadTree(true);\n\n    var tree = data;\n    console.log(tree);\n    tree.search(parseInt(numToSearch));\n    console.log(tree);\n  }\n\n\n  return (\n    <React.Fragment>\n      <div className = \"controls\">\n        <h1>Binary Search Tree Visualizer</h1>\n\n        <form onSubmit = {handleSubmitInsertion}>\n          <input type = \"text\" value = {numToInsert} required onChange = {(e) => {setnumInsert(e.target.value); setReloadTree(false);}} />\n          <input type = \"submit\" value = \"Add number\" />\n        </form>\n\n        <form onSubmit = {handleSubmitDeletion}>\n          <input type = \"text\" value = {numToDelete} required onChange = {(e) => {setnumDelete(e.target.value); setReloadTree(false);}} />\n          <input type = \"submit\" value = \"Delete number\" />\n        </form>\n\n        <form onSubmit = {handleSubmitSearch}>\n          <input type = \"text\" value = {numToSearch} required onChange = {(e) => {setnumSearch(e.target.value); setReloadTree(false);}} />\n          <input type = \"submit\" value = \"Search number\" />\n        </form>\n\n        <button onClick = {() => setPath([])} className = \"reset_button\">\n          Reset Search Path\n        </button>\n\n        <div>\n          <button onClick = {() => {data.inOrder(); setReloadTree(false);}}>\n            Inorder Traversal\n          </button>\n\n          <button onClick = {() => {data.preOrder(); setReloadTree(false);}}>\n            Preorder Traversal\n          </button>\n\n          <button onClick = {() => {data.postOrder(); setReloadTree(false);}}>\n            Postoder Traversal\n          </button>\n\n          <button onClick = {() => setTraversal([])} className = \"reset_button\">\n            Reset Traversal Path\n          </button>\n        </div>\n      </div>\n\n      <br/><br/>\n      <TreeChart className = \"tree\" data={data} pathData = {paths} traversalData = {traversalPath} reloadData = {reloadTree}/>\n\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}